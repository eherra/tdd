import { expect } from "chai";
import { Board } from "../src/Board.mjs";
import { Tetromino } from "../src/Tetromino.mjs";

function moveToAllLeft(board) {
  for (let i = 0; i < 7; i++) {
    board.moveLeft();
  }
}

function moveToAllRight(board) {
  for (let i = 0; i < 7; i++) {
    board.moveRight();
  }
}

describe("Rotating tetrominoes", () => {
  let board;
  beforeEach(() => {
    board = new Board(10, 6);
  });

  describe("T shape can be rotate four times", () => {
    it("a falling tetromino can be rotated right all four shape", () => {
      board.drop(Tetromino.T_SHAPE);
      board.rotateRight();
      expect(board.toString()).to.equalShape(
        `....T.....
         ...TT.....
         ....T.....
         ..........
         ..........
         ..........`
      );

      board.rotateRight();
      expect(board.toString()).to.equalShape(
        `....T.....
         ...TTT....
         ..........
         ..........
         ..........
         ..........`
      );

      board.rotateRight();
      expect(board.toString()).to.equalShape(
        `....T.....
         ....TT....
         ....T.....
         ..........
         ..........
         ..........`
      );

      board.rotateRight();
      expect(board.toString()).to.equalShape(
        `...TTT....
         ....T.....
         ..........
         ..........
         ..........
         ..........`
      );
    });
  });

  describe("I shape can be rotate three times", () => {
    it("a falling I tetromino can be rotated two ways", () => {
      board.drop(Tetromino.I_SHAPE);
      board.rotateRight();

      expect(board.toString()).to.equalShape(
        `.....I....
         .....I....
         .....I....
         .....I....
         ..........
         ..........`
      );

      board.rotateRight();
      expect(board.toString()).to.equalShape(
        `...IIII...
         ..........
         ..........
         ..........
         ..........
         ..........`
      );
    });
  });

  it("a falling T tetromino can be rotated left all four shape", () => {
    board.drop(Tetromino.T_SHAPE);
    board.rotateLeft();
    expect(board.toString()).to.equalShape(
      `....T.....
       ....TT....
       ....T.....
       ..........
       ..........
       ..........`
    );

    board.rotateLeft();
    expect(board.toString()).to.equalShape(
      `....T.....
       ...TTT....
       ..........
       ..........
       ..........
       ..........`
    );

    board.rotateLeft();
    expect(board.toString()).to.equalShape(
      `....T.....
       ...TT.....
       ....T.....
       ..........
       ..........
       ..........`
    );

    board.rotateLeft();
    expect(board.toString()).to.equalShape(
      `...TTT....
       ....T.....
       ..........
       ..........
       ..........
       ..........`
    );
  });

  describe("T shape rotation works with wall kick", () => {
    it("T shape can be rotate on left with wall kick", () => {
      board.drop(Tetromino.T_SHAPE);
      moveToAllLeft(board);
      board.rotateLeft();

      expect(board.toString()).to.equalShape(
        `.T........
         .TT.......
         .T........
         ..........
         ..........
         ..........`
      );
      moveToAllLeft(board);
      board.rotateLeft();
      expect(board.toString()).to.equalShape(
        `.T........
         TTT.......
         ..........
         ..........
         ..........
         ..........`
      );
    });

    it("T shape can be rotate on right with wall kick", () => {
      board.drop(Tetromino.T_SHAPE);
      moveToAllRight(board);
      board.rotateRight();
      expect(board.toString()).to.equalShape(
        `........T.
           .......TT.
           ........T.
           ..........
           ..........
           ..........`
      );
      moveToAllRight(board);
      board.rotateRight();
      expect(board.toString()).to.equalShape(
        `........T.
           .......TTT
           ..........
           ..........
           ..........
           ..........`
      );
    });

    describe("I shape rotation works with wall kick", () => {
      xit("I shape can be rotate on left with wall kick", () => {
        board.drop(Tetromino.I_SHAPE);
        board.rotateLeft();
        moveToAllLeft(board);

        expect(board.toString()).to.equalShape(
          `I.........
             I.........
             I.........
             I.........
             ..........
             ..........`
        );
        board.rotateLeft();
        expect(board.toString()).to.equalShape(
          `IIII......
             ..........
             ..........
             ..........
             ..........
             ..........`
        );
      });

      it("I shape can be rotate on right with wall kick", () => {
        board.drop(Tetromino.I_SHAPE);
        board.rotateRight();
        moveToAllRight(board);
        expect(board.toString()).to.equalShape(
          `.........I
               .........I
               .........I
               .........I
               ..........
               ..........`
        );
        board.rotateRight();
        expect(board.toString()).to.equalShape(
          `......IIII
               ..........
               ..........
               ..........
               ..........
               ..........`
        );
      });

      describe("L shape rotations", () => {
        it("a falling L tetromino can be rotated left all four shape", () => {
          board.drop(Tetromino.L_SHAPE);
          expect(board.toString()).to.equalShape(
            `...LLL....
             ...L......
             ..........
             ..........
             ..........
             ..........`
          );

          board.rotateLeft();
          expect(board.toString()).to.equalShape(
            `....L.....
             ....L.....
             ....LL....
             ..........
             ..........
             ..........`
          );

          board.rotateLeft();
          expect(board.toString()).to.equalShape(
            `.....L....
             ...LLL....
             ..........
             ..........
             ..........
             ..........`
          );

          board.rotateLeft();
          expect(board.toString()).to.equalShape(
            `...LL.....
             ....L.....
             ....L.....
             ..........
             ..........
             ..........`
          );
        });
      });

      describe("J shape rotations", () => {
        it("a falling J tetromino can be rotated left all four shape", () => {
          board.drop(Tetromino.J_SHAPE);
          expect(board.toString()).to.equalShape(
            `...JJJ....
             .....J....
             ..........
             ..........
             ..........
             ..........`
          );

          board.rotateLeft();
          expect(board.toString()).to.equalShape(
            `....JJ....
             ....J.....
             ....J.....
             ..........
             ..........
             ..........`
          );

          board.rotateLeft();
          expect(board.toString()).to.equalShape(
            `...J......
             ...JJJ....
             ..........
             ..........
             ..........
             ..........`
          );

          board.rotateLeft();
          expect(board.toString()).to.equalShape(
            `....J.....
             ....J.....
             ...JJ.....
             ..........
             ..........
             ..........`
          );
        });

        describe("S shape rotations", () => {
          it("a falling S tetromino can be rotated left all two shape", () => {
            board.drop(Tetromino.S_SHAPE);
            expect(board.toString()).to.equalShape(
              `....SS....
               ...SS.....
               ..........
               ..........
               ..........
               ..........`
            );
  
            board.rotateLeft();
            expect(board.toString()).to.equalShape(
              `...S......
               ...SS.....
               ....S.....
               ..........
               ..........
               ..........`
            );
          });
        });

        describe("Z shape rotations", () => {
          it("a falling Z tetromino can be rotated left all two shape", () => {
            board.drop(Tetromino.Z_SHAPE);
            expect(board.toString()).to.equalShape(
              `...ZZ.....
               ....ZZ....
               ..........
               ..........
               ..........
               ..........`
            );
  
            board.rotateLeft();
            expect(board.toString()).to.equalShape(
              `.....Z....
               ....ZZ....
               ....Z.....
               ..........
               ..........
               ..........`
            );
          });
        });
      });
    });
  });
});
